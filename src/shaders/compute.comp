#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;
	uint instanceCount; 
	uint firstVertex;   
	uint firstInstance; 
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	uint idx = gl_GlobalInvocationID.x;
	if (idx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// create variables for ease of use
	Blade grass = blades[idx];
	vec3 v0 = vec3(grass.v0);
	vec3 v1 = vec3(grass.v1);
	vec3 v2 = vec3(grass.v2);
	vec3 up = vec3(grass.up);
	float angle = grass.v0.w;
	float height = grass.v1.w;
	float width = grass.v2.w;
	float stiffness = grass.up.w;
	vec3 rotation = vec3(cos(angle), 0, sin(angle));
	vec3 direction = normalize(cross(up, rotation));

	mat4 view_proj = camera.proj * camera.view;

	// constant variables
	vec3 WIND = vec3(sin(totalTime) * 15.0, 0, mod(totalTime, 10));
	float CURVATURE = 0.5;
	bool CULL_BY_ORIENTATION = false;
	float ORIENTATION_THRESHOLD = 0.1;
	bool CULL_BY_FRUSTUM = false;
	float FRUSTUM_THRESHOLD = 0.1;
	bool CULL_BY_DISTANCE = false;
	float DISTANCE_THRESHOLD = 2;
	int NUM_BUCKETS_FOR_DISTANCE = 25;

	int USING_WIND_ID = 1;

    // DONE: Apply forces on every blade and update the vertices in the buffer
	// gravity = actual gravity + gravity in direction
	vec3 dir = vec3(0, -1, 0);
	vec3 gE = normalize(dir) * 9.81;
	vec3 gravity = gE + length(gE) * direction * 0.25;

	// recovery
	vec3 init = v0 + up * height;
	vec3 recovery = (init - v2) * stiffness;

	// wind 1
	vec3 wind_direction = normalize(WIND);
	float strength_in_direction = dot(wind_direction, normalize(v2 - v0));
	float direction_alignment = 1 - abs(strength_in_direction);
	float wind_alignment = direction_alignment * dot((v2 - v0), up) / height;
	vec3 wind0 = WIND * wind_alignment;

	// wind 2
	vec3 wind_i = vec3(sin(v0.x + totalTime) + sin(v0.y + totalTime));
	vec3 fd = 1 - abs(normalize(wind_i) - normalize(v2 - v0));
	float fr = dot(v2 - v0, up) / height;
	vec3 wind1 = wind_i * fd * fr;

	// pick which wind implementation we want to use
	vec3 wind = bool(USING_WIND_ID) ? wind1 : wind0;

	// total force
	vec3 total_force = deltaTime * (gravity + recovery + wind);

	// clamp to ground
	v2 += total_force;
	v2 -= up * min(dot(up, v2 - v0), 0);

	// clamp v1 > v0
	vec3 projection = v2 - v0 - up * dot(v2 - v0, up);
	float l_projection = length(projection);
	float curve = max(1 - l_projection / height, CURVATURE * max(l_projection / height, 1));
	v1 = v0 + height * up * curve;

	// clamp grass length
	float len_20 = length(v2 - v0);
	float len_21 = length(v2 - v1);
	float len_10 = length(v1 - v0);
	float leg0 = len_20;
	float leg1 = len_21 + len_10;
	float leg = (2.0 * leg0 + leg1) / 3.0;
	float r = height / leg;
	vec3 temp = v0 + r * (v1 - v0);
	grass.v1.xyz = temp;
	grass.v2.xyz = temp + r * (v2 - v1);

	// update this blade
	blades[idx] = grass;

	// DONE: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	
	// dont render grass within the angle threshold of look vector
	if (CULL_BY_ORIENTATION) {
		vec4 view_dir = normalize(inverse(camera.view) * vec4(0, 0, -1, 0));

		// dont do cullting if cam looking straight down to ground
		view_dir.y = 0;
		view_dir = normalize(view_dir);

		if (abs(dot(vec3(view_dir), direction)) < ORIENTATION_THRESHOLD) { return; }
	}
	
	// points to ndc before comparing
	if (CULL_BY_FRUSTUM) {
		vec4 ndc_v0 = view_proj * vec4(v0, 1);
		vec4 ndc_v2 = view_proj * vec4(v2, 1);

		// midpoint
		vec4 ndc_mid = view_proj * vec4(0.25 * (v0 + 2.0 * v1 + v2), 1);

		// bounds check
		float v0_w_check = ndc_v0.w + FRUSTUM_THRESHOLD;
		float v2_w_check = ndc_v2.w + FRUSTUM_THRESHOLD;
		float mid_w_check = ndc_mid.w + FRUSTUM_THRESHOLD;

		bool v0_valid = ndc_v0.x >= -v0_w_check && ndc_v0.x <= v0_w_check
					 && ndc_v0.y >= -v0_w_check && ndc_v0.y <= v0_w_check
					 && ndc_v0.z >= -v0_w_check && ndc_v0.z <= v0_w_check;

	    bool v2_valid = ndc_v2.x >= -v2_w_check && ndc_v2.x <= v2_w_check
					 && ndc_v2.y >= -v2_w_check && ndc_v2.y <= v2_w_check
					 && ndc_v2.z >= -v2_w_check && ndc_v2.z <= v2_w_check;

		bool mid_valid = ndc_mid.x >= -mid_w_check && ndc_mid.x <= mid_w_check
					  && ndc_mid.y >= -mid_w_check && ndc_mid.y <= mid_w_check
					  && ndc_mid.z >= -mid_w_check && ndc_mid.z <= mid_w_check;

		if (!v0_valid && !v2_valid && !mid_valid) { return; }
	}

	// remove more blades the farther away the blades are
	// buckets based on distance
	if (CULL_BY_DISTANCE) {
		vec4 v0_proj = vec4(normalize(view_proj * vec4(v0, 1)));
		float projected_distance = v0_proj.z / v0_proj.w;
		if (projected_distance > DISTANCE_THRESHOLD) { return; }

		// find appropriate buckets for each blade based on distances
		float bucket_threshold = 1 - projected_distance;
		bucket_threshold *= NUM_BUCKETS_FOR_DISTANCE; 
		
		// remove randomly based on bucket. the closer the fewer removed. the farther the more removed.
		// pseudo-random-noise function
		float noise = fract(sin(dot(v0.xy, vec2(12.9898, 78.233))) * 43758.5453);
		if (noise > bucket_threshold) { return; }

		// general distance culling
		if (projected_distance > 0.999999) { return; }
	}
	
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	uint atomic = atomicAdd(numBlades.vertexCount, 1);
	culledBlades[atomic] = blades[gl_GlobalInvocationID.x];
}
