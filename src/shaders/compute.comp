#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
#define CULL_N_BLADES 10
#define D_MAX 10.0
#define TOLERANCE 1.0

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
}time;

struct Blade {
    vec4 v0; //Orientation: the orientation of the grass blade's face
    vec4 v1; //Height: the height of the grass blade
    vec4 v2; //Width: the width of the grass blade's face
    vec4 up; //Stiffness coefficient: the stiffness of our grass blade, which will affect the force computations on our blade
	};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades
{
    Blade blades[];
};

layout(set = 2,binding = 1) buffer CulledBlades
{
    Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
 layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

float randWind(float n) {
	return fract(sin(n) * 43758.5453123);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint bladeIndex = gl_GlobalInvocationID.x;
	
	vec3 v0 = blades[bladeIndex].v0.xyz;
	vec3 v1 = blades[bladeIndex].v1.xyz;
	vec3 v2 = blades[bladeIndex].v2.xyz;
	vec3 up = blades[bladeIndex].up.xyz;

	float direction = blades[bladeIndex].v0.w;
	float height = blades[bladeIndex].v1.w;
	float width = blades[bladeIndex].v2.w;
	float stiffness = blades[bladeIndex].up.w;

	float cosTheta = cos(direction);
	float sinTheta = sin(direction);

	vec3 gravityDir = vec3(0.0f, -1.0f, 0.0f);
	float gravityMag = 0.2f;
	vec3 gE = normalize(gravityDir) * gravityMag; 
	vec3 left = normalize(vec3(cosTheta, 0.0, -sinTheta));
	vec3 f = normalize(cross(left, up));
	vec3 gF = 0.25f * length(gE) * f;
	vec3 gravityForce = gE + gF;

	vec3 Iv2 = vec3(v0 + height*up);	
	vec3 recoveryForce = vec3(Iv2 - v2) * stiffness;

	vec3 wV0 = 0.2f * cos(time.totalTime) * vec3(randWind(v0.x), 0.0, randWind(v0.z));
	float fd = (1 - abs(dot(normalize(wV0), normalize(v2 - v0))));
	vec3 windForce = fd * wV0;

	vec3 tv2 = (gravityForce + recoveryForce + windForce) * time.deltaTime;
	v2 = v1 + tv2;

	float L0 = length(v2 - v0);
	float L1 = length(v2 - v1) + length(v1 - v0);
	float degree = 2.0f;
	float L = (2.0f * L0 + L1) / (degree + 1.0f);
	float r = height / L;
	
	vec3 v1Corr = v0 + r * (v1 - v0);
	vec3 v2Corr = v1Corr + r * (v2 - v1);
	blades[bladeIndex].v1.x = v1Corr.x;
	blades[bladeIndex].v1.y = v1Corr.y;
	blades[bladeIndex].v1.z = v1Corr.z;

	blades[bladeIndex].v1.x = v2Corr.x;
	blades[bladeIndex].v2.y = v2Corr.y;
	blades[bladeIndex].v2.z = v2Corr.z;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	vec3 front = normalize(cross(left, up));
	
	vec3 frontCamSpace = vec3(camera.view * vec4(front, 0.0f));
	vec3 zMinus = vec3(0.0f, 0.0f, -1.0f);
	if (abs(dot(zMinus, frontCamSpace)) >= 0.1f)
	/*if (true)*/
	{
	    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blades[bladeIndex];
	}
}