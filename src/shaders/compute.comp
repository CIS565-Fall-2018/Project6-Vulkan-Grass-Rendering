#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer InputBlades {
	Blade blades[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade blades[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;
 	uint instanceCount;
 	uint firstVertex;
 	uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	uint i = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (i == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	Blade blade = inputBlades.blades[i];
	float angle = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiff = blade.up.w;
	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 front = vec3(cos(angle), 0.0, sin(angle));
	vec3 tangent = normalize(cross(up, front));

	// Gravity
	vec3 g1 = vec3(0.0, -9.8, 0.0);
	vec3 g2 = 0.25 * 9.8 * front;
	vec3 gravity = g1 + g2;

	// Recovery
	vec3 recovery = (up * height + v0 - v2) * stiff;

	// Wind - helicopter!
	vec3 wDir = normalize(cross(vec3(0, 1, 0), vec3(v0.x, 0, v0.z)));
	float wMag = abs(cos(totalTime + v0.z / v0.x)) * 30 * abs(dot(tangent, wDir));
	vec3 wind = wMag * wDir;

	v2 += (gravity) * deltaTime;
	v2 = v2 - up * min(dot(up, v2 - v0), 0);

	// New v1
	float proj = length(v2 - v0 - up * (dot(v2 - v0, up)));
	v1 = v0 + height * up * max(1 - (proj / height), 0.05 * max(proj / height, 1));

	// Length of curve
	float L = (2 * distance(v0, v2) + 1 * (distance(v0, v1) + distance(v1, v2))) / 3;
	v1 = v0 + (height / L) * (v1 - v0);
	v2 = v1 + (height / L) * (v2 - v1);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	bool culled = false;

	// Orientation
	mat4 invView = inverse(camera.view);
	vec3 eye = (invView * vec4(0, 0, 0, 1)).xyz;
	vec3 view = normalize(v0 - eye);

	if (abs(dot(front, view)) < 0.2) {
		culled = true;
	}

	if(!culled) {
		/*inputBlades.blades[i].v0 = vec4(v0, angle);
		inputBlades.blades[i].v1 = vec4(v1, height);
		inputBlades.blades[i].v2 = vec4(v2, width);
		inputBlades.blades[i].up = vec4(up, stiff);*/
		uint vertexCount = atomicAdd(numBlades.vertexCount, 1);
		culledBlades.blades[vertexCount] = inputBlades.blades[i];
	}
}
