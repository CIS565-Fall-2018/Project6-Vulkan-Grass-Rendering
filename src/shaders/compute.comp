#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like

layout(set = 2, binding = 0) buffer Blades{
	Blade blades[];
};

layout(set = 2,binding = 1) buffer CulledBlades{
	Blade culledBlades[];
};

 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inbounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}
//acoording to https://thebookofshaders.com/10/

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point
	uint index = gl_GlobalInvocationID.x;
    
    Blade CurBlade = blades[index];
    vec3 CurV0 = CurBlade.v0.xyz;
    vec3 CurV1 = CurBlade.v1.xyz;
    vec3 CurV2 = CurBlade.v2.xyz;
    vec3 CurUp = CurBlade.up.xyz;

	//collision:
	vec3 mm = 0.25*CurV0+0.5*CurV1+0.5*CurV2;


    float bladeheight = CurBlade.v1.w;
    float Fangle = CurBlade.v0.w;
     //Gravity
	//environmental g
    vec3 gE = normalize(vec3(0,-1,0)) * 9.8f;
 	//Front Gravity
	vec3 width_dir = (vec3(sin(Fangle), 0, cos(Fangle))); 
    vec3 front_dir = normalize(cross(CurUp, width_dir));
     vec3 gF = 0.25 * length(gE) * front_dir;
 	vec3 g = gE + gF;
 	//Recovery
	float stiffness = CurBlade.up.w;
	//initial v2
     vec3 iv2 = CurV0 + normalize(CurUp) * bladeheight;
	
    vec3 r = (iv2 - CurV2) * stiffness ;

	
	//normal wind pattern
    //vec3 wind_dir = normalize(vec3(1, 0, 1));

	//center wind pattern
	vec3 wind_dir = normalize(-vec3(1,1,1)+CurV0);

	vec3 tocent = CurV0-vec3(1,1,1);
	vec3 tangent = normalize(cross(tocent,CurUp));
	//vec3 wind_dir = tangent;
    float wind_speed = 5.0;
	//float waveInterval = 1.8;
    float waveInterval = 1.2;
     float wavecoeff = 1*(cos(( dot(CurV0,wind_dir)- wind_speed * totalTime) / waveInterval) );
	 float normalmag = 0;
	//Wind
    //directional alignment 
    float fd = 1 - abs(dot(wind_dir, normalize(CurV2 - CurV0)));
    //straightness
    float fr = dot((CurV2 - CurV0), CurUp) / bladeheight;
     float wind_power = 10.0;
	//float wind_power = 5.0*(1-distance(CurV0,vec3(1,1,1)));
    vec3 w = wind_dir * wind_power * (normalmag+wavecoeff) * fd * fr;
    //Total Force
	vec3 tv2 = (g + r + w) * deltaTime;
    vec3 fv2 = CurV2 + tv2;
	//State Validation
 	//: v2 must not be pushed beneath the ground, the position of v1 has to
	//be set according to the position of v2, and the length of the curve
	//must be equal to the height of the blade of grass.



    fv2 = fv2 - CurUp * min(dot(CurUp, (fv2 - CurV0)), 0);

    float l_proj = length(fv2 - CurV0 - CurUp * dot((fv2 - CurV0),CurUp));

    vec3 fv1 = CurV0 + bladeheight * CurUp * max((1 - l_proj / bladeheight), 0.05*max(l_proj / bladeheight, 1));
 	
	float L0 = distance(fv2, CurV0);
    float L1 = distance(fv2, fv1) + distance(fv1, CurV0);
    float L = (2.0*L0 + (3.0-1.0)*L1)/(3.0+1.0);
    CurBlade.v1.xyz = CurV0 + (bladeheight / L)*(fv1 - CurV0);
	CurBlade.v2.xyz = CurBlade.v1.xyz + (bladeheight / L)*(fv2 - fv1);
    blades[index] = CurBlade;
     // TODO: Cull blades that are too far away or not in the camera frustum and write them
    // to the culled blades buffer
    // Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
    // You want to write the visible blades to the buffer without write conflicts between threads
 	CurV1 =  CurBlade.v1.xyz;
	CurV2 =  CurBlade.v2.xyz;
 	//Orientation culling
	bool cullorientation = false;

	vec3 viewdir = normalize((inverse(camera.proj*camera.view)*vec4(0,0,1,0)).xyz);
	float Epsilon = 0.2;
	if(abs(dot(normalize(width_dir), viewdir)) < Epsilon)
		cullorientation = true;

 	//View-Frustum Culling
	bool cullviewfrustum = true;
	vec3 midpt = 0.25 * CurV0 + 0.5 * CurV1 + 0.25 * CurV2;
	mat4 vp = camera.proj * camera.view;
	vec4 ndcV0 = vp * vec4(CurV0, 1.0f);
	vec4 ndcV2 = vp * vec4(CurV2, 1.0f);
	vec4 ndcmidpt = vp * vec4(midpt, 1.0f);
 	ndcV0/=ndcV0.w;
	ndcV2/=ndcV2.w;
	ndcmidpt/=ndcmidpt.w;
 	float tolerance = 0.2;
	
	if(inbounds(ndcV0.x,1+tolerance) &&inbounds(ndcV0.y,1+tolerance) || inbounds(ndcV2.x,1+tolerance) && inbounds(ndcV2.y,1+tolerance) 
	|| inbounds(ndcmidpt.x,1+tolerance) && inbounds(ndcmidpt.y,1+tolerance) )
	{
			cullviewfrustum = false;
	}
 	//Distance Culling
	bool culldis = false;
	float far = 50;
	float close = 0.1;
	float interval = 10;
	int count = 5;
	vec4 v0CampSpace = camera.view*vec4(CurV0,1.0);

	if(-v0CampSpace.z>far||-v0CampSpace.z<close) culldis = true;

	int cur = int(int(-v0CampSpace.z-0.1)/interval)+1;
	if(culldis == false)
	{
		if(index%cur>1.0) culldis = true;
	}
	
 	if(!cullorientation && !cullviewfrustum && !culldis){
		culledBlades[atomicAdd(numBlades.vertexCount , 1)] = CurBlade;
	}
	//culledblades[atomicAdd(numBlades.vertexCount,1)] = blades[gl_GlobalInvocationID.x];
    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
