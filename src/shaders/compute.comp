#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades
{
	Blade inputBlades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades
{
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades 
{
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inBoundsVec(vec3 v, float bounds) {
	return inBounds(v.x, bounds) && inBounds(v.y, bounds) && inBounds(v.z, bounds);
}

void main() 
{
	// Similar to thread ID
	uint index = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (index == 0) 
	{
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
	
	Blade blade = inputBlades[index];
	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	// Force 1: Recovery

	vec3 Iv2 = blade.v0.xyz + height * (blade.up.xyz);
	float N = 0.0; // TODO: Dont even get me started!!
	vec3 recovery_force = (Iv2 - blade.v2.xyz) * stiffness * max(1.0 - N, 0.1);

	// Force 2: Gravity

	float mass = 1.0; // TODO: Do you even lift bruh??
	flaot t = 0.0; // TODO: What the fuck is this??
	vec4 D = vec4(0.0, -1.0, 0.0, 9.8);
	vec4 C = vec4(0.0); // TODO: Hocus pocus

	float z = cos(orientation); // sin(90 - orientation)
	float x = sin(orientation); // cos(90 - orientation)
	float y = 0.0;// ???
	vec3 t = vec3(x, 0.0, z);

	vec3 f = normalize(cross(blade.up.xyz, t));
	vec3 ge = mass * (normalize(D.xyz) * D.w * (1.0 - t) + C * t);
	vec4 gravityForce = ge + (0.25 * normalize(ge) * f);

	// Force 3: Wind





	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

}
