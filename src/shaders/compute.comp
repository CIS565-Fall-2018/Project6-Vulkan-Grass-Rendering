#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
	Blade blades[];
};

layout(set = 2, binding = 1) buffer Culled {
	Blade culled[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 2) buffer NumBlades {
 	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool bladeInBounds(vec3 v0, vec3 v1, vec3 v2, float threshold) {

	vec4 m = vec4((v0 / 4) + (v1 / 2) + (v2 / 4), 1.0);

	vec4 v_v0 = camera.proj * camera.view * vec4(v0, 1.0);
	v_v0 = v_v0 / v_v0.w;
	vec4 v_v2 = camera.proj * camera.view * vec4(v2, 1.0);
	v_v2 = v_v2 / v_v2.w;
	m = camera.proj * camera.view * m;
	m = m / m.w;
	
	bool y_in = inBounds(v_v0.y, threshold);
	bool x_in = inBounds(v_v0.x, threshold);
	bool z_in = inBounds(v_v0.z - 0.5, threshold / 2.0);

	if (y_in && x_in && z_in) {
		return true;
	}
	y_in = inBounds(v_v2.y, threshold);
	x_in = inBounds(v_v2.x, threshold);
	//z_in = inBounds(v_v2.z - 0.5, threshold);

	if (y_in && x_in && z_in) {
		return true;
	}
	
	y_in = inBounds(m.y, threshold);
	x_in = inBounds(m.x, threshold);
	z_in = inBounds(m.z - 0.5, threshold);

	if (y_in && x_in && z_in) {
		return true;
	}

	return false;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	// v0 and orientation
	vec3 v0 = blades[gl_GlobalInvocationID.x].v0.xyz;
	float face = blades[gl_GlobalInvocationID.x].v0.w;

	// v1 and height
	vec3 v1 = blades[gl_GlobalInvocationID.x].v1.xyz;
	float h = blades[gl_GlobalInvocationID.x].v1.w;

	// v2 and width
	vec3 v2 = blades[gl_GlobalInvocationID.x].v2.xyz;
	float w = blades[gl_GlobalInvocationID.x].v2.w;

	// up direction and stiffness
	vec3 up = blades[gl_GlobalInvocationID.x].up.xyz;
	float stiff = blades[gl_GlobalInvocationID.x].up.w;

	// frustrum culling
	float threshold = 1.0 + w / 2.0;
	bool f_cull = bladeInBounds(v0, v1, v2, threshold);

	// for now until culling and stuff added
	if (f_cull) {
		uint idx = atomicAdd(numBlades.vertexCount , 1);
		culled[idx] = blades[gl_GlobalInvocationID.x];
	}

}
