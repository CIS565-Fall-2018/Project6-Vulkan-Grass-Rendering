#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer Blades {
	  Blade[] blades;
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade[] culledBlades;
};

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currentBlade = blades[gl_GlobalInvocationID.x];
    vec3 v0 = currentBlade.v0.xyz;
    vec3 v1 = currentBlade.v1.xyz;
    vec3 v2 = currentBlade.v2.xyz;
    vec3 up = currentBlade.up.xyz;
    float orienation = currentBlade.v0.w;
    float height = currentBlade.v1.w;
    float width = currentBlade.v2.w;
    float stiffness = currentBlade.up.w;
    vec3 forward = normalize(vec3(sin(orienation), 0, cos(orienation)));

    // TODO: Apply forces on every blade and update the vertices in the buffer
    // calculate gravity
    vec3 ge = vec3(0, -9.81, 0);
    vec3 gf = .25 * length(ge) * forward;
    vec3 gravity = ge + gf;    
    
    // calculate recovery
    vec3 iv2 = v0 + height * up;
    vec3 recovery = (iv2 - v2) * stiffness;
    
    // calculate wind
    vec3 wind = vec3(0);

    // calculate total force
    v2 += (gravity + recovery + wind) * deltaTime;

    // validate positions 
    v2 = v2 - up * min(dot(up, v2 - v0), 0);
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1));
    
    // validate length 
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v2) + length(v1 - v0);
    float degree = 3;
    float L = (2 * L0 + (degree - 1) * L1) / (degree + 1);
    float r = height / L;

    // correct positions
    vec3 v1_corr = v0 + r * (v1 - v0);
    vec3 v2_corr = v1_corr + r * (v2 - v1);
    currentBlade.v1.xyz = v1_corr;
    currentBlade.v2.xyz = v2_corr;
    blades[gl_GlobalInvocationID.x] = currentBlade;

    // TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
    // no culling for now
    culledBlades[atomicAdd(numBlades.vertexCount, 1)] = currentBlade;


    

	
    
}
