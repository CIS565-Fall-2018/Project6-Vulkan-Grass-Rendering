#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
	mat4 view;
	mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
	float deltaTime;
	float totalTime;
};

struct Blade {
	vec4 v0;
	vec4 v1;
	vec4 v2;
	vec4 up;
};

layout(set = 2, binding = 0) buffer InputBlades {
	Blade blades[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade blades[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
} numBlades;

bool inBounds(float value, float bounds) {
	return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	Blade blade = inputBlades.blades[index];
	float h = blade.v1.w;
	float w = blade.v2.w;
	float stiffness = blade.up.w;
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	// Gravity
	vec3 gE = vec3(0.0, -9.8, 0.0);
	vec3 f = normalize(cross(up, vec3(sin(blade.v0.w), 0.0, cos(blade.v0.w))));
	vec3 gF = 0.25 * 9.8 * f;
	vec3 gravity = gE + gF;
	// Recovery
	vec3 recovery = (v0 + h * up - v2) * stiffness;

	// Wind + Repulsion
	vec3 dir = vec3(1.0, 0.0, 0.0) * cos(totalTime);
	float fd = 1 - abs(dot(normalize(dir), normalize(v2 - v0)));
	float fr = dot((v2 - v0), up) / h;
	vec3 wind = vec3(0);

	// Get position on a circle based on time
	float x = cos(totalTime * 2.0);
	float y = sin(totalTime * 2.0);
	vec3 repulsor = vec3(x, 0.0, y) * vec3(10.0);
	float dist = (distance(repulsor, v0) / 1.0);
	vec3 repulseDir = v0 - repulsor;
	float influenceRadius = 3.0 * abs(sin(totalTime / 7.0)) + 1.0;
	if (dist < influenceRadius) {
		wind = repulseDir * dist * fd * fr;
	} else {
		wind = dir * fd * fr;
	}

	v2 += (recovery + gravity + wind) * deltaTime;

	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
	float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + h * up * max(1.0 - (lproj / h), 0.05 * max(lproj / h, 1.0));
	float n = 2.0;
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	float L = ((2.0 * L0) + (n - 1.0) * L1) / (n + 1.0);
	float r = h / L;
	vec3 v1corr = v0 + r * (v1 - v0);
	vec3 v2corr = v1corr + r * (v2 - v1);
	inputBlades.blades[index].v1.xyz = v1corr;
	inputBlades.blades[index].v2.xyz = v2corr;

	// CVULLINH:

	#define ORIENTATION_CULL;
	#define FRUSTUM_CULL;
	#define DISTANCE_CULL;

	vec4 eye = inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0);

	#ifdef ORIENTATION_CULL
	vec3 dir_c = normalize(eye.xyz - v0); vec3 dir_b = f;
	if (dot(dir_c, dir_b) > 0.9) {
		return;
	}
	#endif

	#ifdef FRUSTUM_CULL
	vec4 v0_prime = camera.proj * camera.view * vec4(v0, 1.0);
	float hg    = v0_prime.w + 2.0;
	if (!inBounds(v0_prime.x, hg) || !inBounds(v0_prime.y, hg) || !inBounds(v0_prime.z, hg)) {
		return;
	}
	#endif

	#ifdef DISTANCE_CULL
	float d_proj = length(v0 - eye.xyz - up * dot(up, v0 - eye.xyz));
	if (mod(index, 10.0) > floor(10.0 * (1 - (d_proj / 100.0)))) {
		return;
	}
	#endif
	culledBlades.blades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades.blades[index];
}
