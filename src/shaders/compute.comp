#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

layout(set = 2, binding = 0) buffer InputBlades {
	Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount;   // Write the number of blades remaining here
	uint instanceCount; // = 1
	uint firstVertex;   // = 0
	uint firstInstance; // = 0
} numBlades;


bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	uint index = gl_GlobalInvocationID.x;
	Blade blade = inputBlades[index];

	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;

	float ori = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	vec3 facedir = normalize(cross(up, vec3(sin(ori), 0, cos(ori))));

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// gravity
	vec3 ge = vec3(0.0, -2.95, 0.0);
	vec3 gf = 0.25 * length(ge) * facedir;
	vec3 gravity = ge + gf;

	// wind
	vec3 windorigin = vec3(0.0, 0.0, 0.0);//vec3(3.0 * sin(totalTime), 0.0, 3.0 * cos(totalTime));
	float dis = length(windorigin - v0);
	vec3 wi =  5.0 * (sin(dis * 2.0 - totalTime * 2.0) + 0.5) * normalize(v0 - windorigin);
	float fd = 1.0 - abs(dot(normalize(wi), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	vec3 wind = wi * fr * fd ;

	// recover
	vec3 iv2 = v0 + height * up;
	vec3 recovery = (iv2 - v2) * stiffness;

	// state validation
	vec3 total = gravity + recovery + wind;
	v2 += total * deltaTime;

	v2 = v2 - up * min(dot(up, (v2 - v0)), 0.0);
	float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + height * up * max(1.0 - lproj / height, 0.05 * max(lproj / height, 1.0));

	float l0 = length(v2 - v0);
	float l1 = length(v2 - v1) + length(v1 - v0);
	float l = (2.0 * l0 + 2.0 * l1) / 4.0;

	float r = height / l;
	blade.v1.xyz = v0 + r * (v1 - v0);
	blade.v2.xyz = v1 + r * (v2 - v1);
	inputBlades[index] = blade;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	bool orientationculled = false;
	bool viewculled = false;
	bool distanceculled = false;
	
	// orientation culling
	mat4 inverseview = inverse(camera.view);
	vec3 viewdir = (inverseview * vec4(0.0, 0.0, 1.0, 0.0)).xyz;
	if(abs(dot(facedir, viewdir)) > 0.7) {
		orientationculled = true;
	}

	// view-frustum culling
	mat4 viewproj = camera.proj * camera.view;
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;

	vec4 projv0 = viewproj * vec4(v0, 1.0);
	vec4 projv2 = viewproj * vec4(v2, 1.0);
	vec4 projm = viewproj * vec4(m, 1.0);

	float t = 0.2;
	
	float hv0 = projv0.w + t;
	float hv2 = projv2.w + t;
	float hm = projm.w + t;

	viewculled = !((inBounds(projv0.x, hv0) && inBounds(projv0.y, hv0) && inBounds(projv0.z, hv0)) ||
				  (inBounds(projv2.x, hv2) && inBounds(projv0.y, hv2) && inBounds(projv0.z, hv2)) ||
				  (inBounds(projm.x, hm) && inBounds(projm.y, hm) && inBounds(projm.z, hm)));

	// distance culling
	vec3 viewv0 = (camera.view * vec4(v0, 1.0)).xyz;
	vec3 viewup = normalize((camera.view * vec4(up, 0.0)).xyz);
	float dproj = length(viewv0 - viewup * dot(viewv0, viewup));

	float dmax = 50.0;
	uint n = 10;
	if(index % n > uint(floor(n * (1.0 - dproj / dmax)))) {
		distanceculled = true;
	}

	if(!distanceculled && !orientationculled && !viewculled) {
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
	}

}
