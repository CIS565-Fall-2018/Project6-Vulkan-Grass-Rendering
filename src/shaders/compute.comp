#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like



layout(set = 2, binding = 0) buffer Blades {
 	  Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
 	  Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
      uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint idx = gl_GlobalInvocationID.x;
	Blade blade = blades[idx];

	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;

	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;

	vec3 dir = normalize(cross(up, vec3(sin(orientation), 0.f, cos(orientation))));

	// Gravity
	vec3 gE = vec3(0.f, -9.8, 0.f);
	// gF = (1/4) * ||gE|| * f
	vec3 gF = 0.25 * length(gE) * dir;
	vec3 g = gF + gE;

	// recovery
	vec3 iv2 = v0 + up * height;
	vec3 recovery = (iv2 - v2) * stiffness;

	// wind
	vec3 wind_dir = vec3(1, 1, 0);
	vec3 wi = wind_dir * (sin(5 * totalTime) + cos(4 * totalTime));
	float fd = 1 - abs(dot(normalize(wi), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	vec3 w = 10 * wi * fd * fr;

	// total force
	v2 += (g + recovery + w + 0) * deltaTime;

	// state validation
	// ensure v2 not pushed below ground
	v2 -= up * min(dot(up, v2 - v0), 0.f);

	// position of v1 always above v0
	float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + height * up * max(1 - l_proj / height, 0.05 * max(l_proj / height, 1.f));

	// Bezier curve not larger than the height of the blade
	float n = 3.0;
	float L0 = distance(v2, v0);
	float L1 = distance(v2, v1) + distance(v1, v0);
	float L = (2 * L0 + (n - 1) * L1) / (n + 1);
	float r = height / L;
	vec3 v1_corr = v0 + r * (v1 - v0);
	vec3 v2_corr = v1_corr + r * (v2 - v1);

	// apply
	blades[idx].v1.xyz = v1_corr;
	blades[idx].v2.xyz = v2_corr;



	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	v0 = blade.v0.xyz;
	v1 = blade.v1.xyz;
	v2 = blade.v2.xyz;

	// orientation culling
	vec3 dir_c = (inverse(camera.view) * vec4(0, 0, 1, 0)).xyz;
	dir_c = normalize(vec3(dir_c.x, 0.f, dir_c.z));
	bool orientationCulled = 0.9 > abs(dot(dir_c, dir));

	// view_frustum culling
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	mat4 VP = camera.proj * camera.view;
	float t = 1.f;

	vec4 p_v0 = VP * vec4(v0, 1.f);
	vec4 p_v2 = VP * vec4(v2, 1.f);
	vec4 p_m = VP * vec4(m, 1.f);

	float h_v0 = p_v0.w + t;
	float h_v2 = p_v2.w + t;
	float h_m = p_m.w + t;

	bool v_v0 = inBounds(p_v0.x, h_v0) 
	&& inBounds(p_v0.y, h_v0) 
	&& inBounds(p_v0.z, h_v0);

	bool v_v2 = inBounds(p_v2.x, h_v2) 
	&& inBounds(p_v2.y, h_v2) 
	&& inBounds(p_v2.z, h_v2);

	bool v_m = inBounds(p_m.x, h_m) 
	&& inBounds(p_m.y, h_m) 
	&& inBounds(p_m.z, h_m);

	bool viewfrustumCulled = !(v_v0 && v_v2 && v_m);

	// Distance culling
	vec3 c = vec3(inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f)).xyz;
	float d_max = 50.f;
	uint num = 10;
	float d_proj = length(v0 - c - up * dot(v0 - c, up));
	bool distanceCulled = mod(idx, num) < floor(num * (1 - d_proj / d_max));

	if(!(orientationCulled || viewfrustumCulled || distanceCulled)){
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = blade;
	}

}
