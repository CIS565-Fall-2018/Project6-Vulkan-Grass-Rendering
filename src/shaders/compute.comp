#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer InputBlades {
  Blade blades[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
  Blade blades[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;
 	  uint instanceCount;
 	  uint firstVertex;
 	  uint firstInstance;
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads


	//inputBlades.blades[gl_GlobalInvocationID.x].v0 = vec4(2,2,2,1);
	//vec4 v0 = inputBlades.blades[gl_GlobalInvocationID.x].v0;
	//inputBlades.blades[gl_GlobalInvocationID.x].v1 = v0 + vec4(1,0,1,0);
	//inputBlades.blades[gl_GlobalInvocationID.x].v2 = v0 + vec4(4,0,2,0);
	//inputBlades.blades[gl_GlobalInvocationID.x].up = vec4(0,1,0,1);

	culledBlades.blades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades.blades[gl_GlobalInvocationID.x];
}
