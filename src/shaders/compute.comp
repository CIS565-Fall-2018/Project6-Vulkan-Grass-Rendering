#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer Blades {
	  Blade[] blades;
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade[] culledBlades;
};

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool orientationCulled(vec3 viewDir, vec3 widthDir){
    return abs(dot(viewDir, widthDir)) > 0.9;
}

bool isPointInViewFrustum(vec4 point, float tolerance){
    float h = point.w + tolerance;
    return inBounds(point.x, h) && inBounds(point.y, h) && inBounds(point.z, h);
}

bool viewFrustumCulled(vec3 v0, vec3 v1, vec3 v2){
    vec3 midpoint = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    float tolerance = 0.05;
    mat4 viewProj = camera.proj * camera.view;
    bool v0_inView = isPointInViewFrustum(viewProj * vec4(v0, 1), tolerance);
    bool v2_inView = isPointInViewFrustum(viewProj * vec4(v2, 1), tolerance);
    bool midpoint_inView = isPointInViewFrustum(viewProj * vec4(midpoint, 1), tolerance);
    return !v0_inView && !v2_inView && !midpoint_inView;
}

bool distanceCulled(vec3 v0, vec3 up){
    // cameraSpace_v0 is the same as world space v0 - world space camera pos
    vec3 cameraSpace_v0 = (camera.view * vec4(v0, 1)).xyz; 
    float dproj = length(cameraSpace_v0 - up * dot(up, cameraSpace_v0));
    float dmax = 60;
    int buckets = 8;

    return gl_GlobalInvocationID.x % buckets > buckets * (1 - dproj / dmax);
}


void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    Blade currentBlade = blades[gl_GlobalInvocationID.x];

    // get data
    vec3 v0 = currentBlade.v0.xyz;
    vec3 v1 = currentBlade.v1.xyz;
    vec3 v2 = currentBlade.v2.xyz;
    vec3 up = currentBlade.up.xyz;
    float orienation = currentBlade.v0.w;
    float height = currentBlade.v1.w;
    float width = currentBlade.v2.w;
    float stiffness = currentBlade.up.w;
    vec3 forwardDir = normalize(vec3(sin(orienation), 0, cos(orienation)));
    vec3 widthDir = normalize(cross(up, forwardDir));
    mat4 invView = inverse(camera.view);
    vec3 cameraDir = normalize(-vec3(invView[2][0], invView[2][1], invView[2][2]));

    // TODO: Apply forces on every blade and update the vertices in the buffer
    // calculate gravity
    vec3 ge = vec3(0, -9.81, 0);
    vec3 gf = .25 * length(ge) * forwardDir;
    vec3 gravity = ge + gf;    
    
    // calculate recovery
    vec3 iv2 = v0 + height * up;
    vec3 recovery = (iv2 - v2) * stiffness;
    
    // calculate wind
    vec3 windDir = vec3(1, 0, 0);
    vec3 wind = sin(totalTime + (v0.x - 20) / 3) * windDir * 1.5;
    float directionalAlignment = 1 - abs(dot(normalize(wind), normalize(v2-v0)));
    float heightRatio = dot(v2 - v0, up) / height;
    wind *= directionalAlignment * heightRatio; 

    // calculate total force
    v2 += (gravity + recovery + wind) * deltaTime;

    // validate positions 
    v2 = v2 - up * min(dot(up, v2 - v0), 0);
    float lproj = length(v2 - v0 - up * dot(v2 - v0, up));
    v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1));
    
    // validate length 
    float L0 = length(v2 - v0);
    float L1 = length(v1 - v2) + length(v1 - v0);
    float degree = 3;
    float L = (2 * L0 + (degree - 1) * L1) / (degree + 1);
    float r = height / L;

    // correct positions
    vec3 v1_corr = v0 + r * (v1 - v0);
    vec3 v2_corr = v1_corr + r * (v2 - v1);
    currentBlade.v1.xyz = v1_corr;
    currentBlade.v2.xyz = v2_corr;
    blades[gl_GlobalInvocationID.x] = currentBlade;

    // TODO: Cull blades that are too far away or not in the camera 
    // frustum and write them to the culled blades buffer
    if (!orientationCulled(cameraDir, widthDir) && 
        !viewFrustumCulled(v0, v1_corr, v2_corr) && 
        !distanceCulled(v0, up)){
        // Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
        // You want to write the visible blades to the buffer without write conflicts between threads
        // no culling for now
        culledBlades[atomicAdd(numBlades.vertexCount, 1)] = currentBlade;
    }
}
