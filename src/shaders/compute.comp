#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//



layout(set = 2, binding = 0) buffer InputBlades{
	Blade blades[];
}inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades{
	Blade blades[];
}culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;




bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	uint  index = gl_GlobalInvocationID.x;

	if (index == 0) {
		  numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer

	Blade blade = inputBlades.blades[index];

	float angle = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float k = blade.up.w;
	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;

	vec3 tangent = vec3(cos(angle), 0.0, sin(angle));
	vec3 front = normalize(cross(up, tangent));

	// gravity
	float gravity = 9.8;
	vec3 gE = vec3(0.0, -gravity, 0.0);
	vec3 gF = 0.25 * gravity * front;
	vec3 gTotal = gE + gF;

	// recovery
	vec3 iv2 = (up * height) + v0;
	vec3 recovery = (iv2 - v2) * k;

	// wind
	vec3 wDir = normalize(vec3(1, 0, 0));
	float wMag = 5 * cos(2 * totalTime) * abs(dot(tangent, wDir));
	vec3 wind = wMag * wDir;

	 v2 += (gravity + recovery + wind) * deltaTime;
	//v2 += vec4(1.0, 0.0, 0.0, 0.0)

	// grass above ground;
	v2 = v2 - up * min(dot(up, v2 - v0), 0);

	// new v1
	float lProj = length(v2 - v0 - up * (dot(v2 - v0, up)));
	v1 = v0 + height * up * max(1 - (lProj / height), 0.05 * max(lProj / height, 1));
	

	float n = 2;
	float L0 = distance(v0, v2);
	float L1 = distance(v0, v1) + distance(v1, v2);
	float L = (2 * L0 + (n - 1) * L1) / (n + 1);
	float gamma = height / L;
	v1 = v0 + gamma * (v1 - v0);
	v2 = v1 + gamma * (v2 - v1);


	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	// float g = 9.8;
	// vec3 G = vec3(0, -1, 0);
	// vec3 gE = normalize(G) * g;
	// vec3 gF = 0.25 * length(gE) * vec3(1, 0, 0);
	// vec3 gTotal = gE + gF;
	// inputBlades.blades[gl_GlobalInvocationID.x].v2 += vec4(1, 0, 0, 0);
	// culledBlades.blades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades.blades[gl_GlobalInvocationID.x];


	bool culled = false;

	// orientation
	mat4 invView = inverse(camera.view);
	vec3 eye = (invView * vec4(0, 0, 0, 1)).xyz;
	vec3 view = normalize(v0 - eye);


	
	if(dot(front, -view) > 0.9)
	{
		culled = true;
	}


	// frustum culled
	float epsilon = 3.f;
	if (!culled)
	{
		mat4 viewProj = camera.proj * camera.view;
		vec4 v0_ndc = viewProj * vec4(v0, 1);
		if (!inBounds(v0_ndc.x, v0_ndc.w + epsilon) || !inBounds(v0_ndc.y, v0_ndc.w + epsilon)) 
		{
			culled = true;

		}

		vec4 v2_ndc = viewProj * vec4(v2, 1);
		if (!inBounds(v2_ndc.x, v2_ndc.w + epsilon) || !inBounds(v2_ndc.y, v2_ndc.w + epsilon)) 
		{
			culled = true;
		}

		vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
		vec4 m_ndc = viewProj * vec4(m, 1);
		if (!inBounds(m_ndc.x, m_ndc.w + epsilon) || !inBounds(m_ndc.y, m_ndc.w + epsilon))
		{
			culled = true;
		}
	}



	// distance culled 
	if(!culled)
	{
		float projD = length(v0 - eye - up * dot(up, v0 - eye));
		float dMax = 40.0;
		float numBuckets = 15;
		if (mod(index, numBuckets) > floor(numBuckets * (1.0 - (projD / dMax))))
		{
			culled = true;
		}		
	}

	if(!culled)
	{
		inputBlades.blades[index].v0 = vec4(v0, angle);
		inputBlades.blades[index].v1 = vec4(v1, height);
		inputBlades.blades[index].v2 = vec4(v2, width);
		inputBlades.blades[index].up = vec4(up, k);

		culledBlades.blades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades.blades[index];

	}
}
