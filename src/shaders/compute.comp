#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades
{
	Blade inputBlades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades
{
	Blade culledBlades[];
};

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer NumBlades 
{
 	uint vertexCount;   // Write the number of blades remaining here
 	uint instanceCount; // = 1
 	uint firstVertex;   // = 0
 	uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

bool inBounds2(vec3 vectorVal, float bounds) 
{
    return (inBounds(vectorVal.x, bounds) && inBounds(vectorVal.y, bounds) && inBounds(vectorVal.z, bounds));
}

void main() 
{
	// Similar to thread ID
	uint index = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (index == 0) 
	{
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // Apply forces on every blade and update the vertices in the buffer
	
	Blade blade = inputBlades[index];
	float orientation = blade.v0.w;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;
	vec3 up = blade.up.xyz;
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;

	// Force 1: Recovery
	vec3 Iv2 = v0 + height * (up);
	float N = 0.0; // TODO: Dont even get me started!!
	vec3 recoveryForce = vec3(0.0);//(Iv2 - v2) * stiffness * max(1.0 - N, 0.1);

	// Force 2: Gravity
	float mass = 1.0; 
	float t = 0.0; 
	vec4 D = vec4(0.0, -1.0, 0.0, 9.8);
	vec3 C = vec3(0.0); // Hocus pocus

	float z = cos(orientation); // sin(90 - orientation)
	float x = sin(orientation); // cos(90 - orientation)
	float y = 0.0;// ???
	vec3 bit = vec3(x, 0.0, z);

	vec3 f = normalize(cross(up, bit));
	vec3 ge = mass * (normalize(D.xyz) * D.w * (1.0 - t) + C * t);
	vec3 gravityForce = ge + (0.25 * normalize(ge) * f);

	// Force 3: Wind
	vec3 wi_v0 = vec3(1.0, 0.0, 0.0) * sin(totalTime) + cos(totalTime * v0) * vec3(0.0, 0.0, 1.0); // Sample Wind force
	vec3 v2_v0 = v2 - v0;
	float fd = 1.0 - abs(dot(normalize(wi_v0), normalize(v2 - v0)));
	float fr = dot(v2_v0, up) / height;
	float theta = fd * fr;
	vec3 windForce = vec3(0.0);//wi_v0 * theta;

	// Update Pos of v2
	vec3 new_v2 = v2 + (recoveryForce + gravityForce + windForce) * deltaTime;

	// State Validation
	new_v2 = new_v2 - up * min(dot(up, new_v2 - v0), 0.0);
	float lproj = length(new_v2 - v0 - up * dot(new_v2 - v0, up));
	float temp_ratio = lproj/height;
	// Ensures that grass is slightly curved
	vec3 new_v1 = v0 + height * up * max(1.0 - temp_ratio, 0.05 * max(temp_ratio, 1.0)); 
	// Ensure length if bezier curve is not larger than height of grass
	float L0 = length(new_v2 - v0);
	float L1 = length(new_v1 - new_v2) + length(v0 - new_v1);
	float degree = 2.0; // Quadratic
	float L = (2.0 * L0  + (degree - 1) * L1) / (degree + 1);

	// Corrected Positions
	float r = height / L;
	vec3 v1_correct = v0 + r * (new_v1 - v0);
	vec3 v2_correct = v1_correct + r * (new_v2 - new_v1);

	blade.v1 = vec4(v1_correct, height);
	blade.v2 = vec4(v2_correct, width);
	inputBlades[index] = blade;

	// Orientation Culling
	mat4 inverseTransform = inverse(camera.view);
	vec3 cameraVec = normalize(v0 - inverseTransform[3].xyz);
	bool dontOrientCull = abs(dot(f, cameraVec)) > 0.9f;

	// View Frustrum Culling
	mat4 VP = camera.proj * camera.view;
	float h = 1.01;

	// Testing v0
	vec4 p_v0 = VP * vec4(v0, 1.0);
	p_v0 /= p_v0.w;
	bool isV0InBounds = inBounds2(p_v0.xyz, h);

	// Testing m
	vec3 m = 0.25 * v0 + 0.5 * v1_correct + 0.25 * v2_correct;
	vec4 p_m = VP * vec4(m, 1.0);
	p_m /= p_m.w;
	bool isMInBounds = inBounds2(p_m.xyz, h);

	// Testing v2
	vec4 p_v2 = VP * vec4(v0, 1.0);
	p_v2 /= p_v2.w;
	bool isV2InBounds = inBounds2(p_v2.xyz, h);

	bool dontFrustrumCull = !(isV0InBounds || isMInBounds || isV2InBounds);

	// Distance Culling
	float dmax = 50.0;
	float nBlades = 30;

	vec3 c = mat3(inverseTransform) * (-camera.view[3].xyz);
	float dproj = length(v0 - c - up * (dot(v0 - c, up)));

	float X = floor(nBlades * (1.0 - dproj/dmax));
	bool dontDistanceCull = X < (mod(index, nBlades));
	
	if(!dontOrientCull && !dontFrustrumCull && !dontDistanceCull)
	{
		culledBlades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades[index];
	}
}
